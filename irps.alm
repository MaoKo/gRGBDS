
_irps_cache? := $00
calminstruction _backend_irps? return?*, text?*&
        ; ** TODO ** CACHE
        local       identifier, check_void, check_space
        expand      text
    init:   
        arrange     text, text =__EOF
    main:   
        match       head tail, text
        jyes        next
        exit
    next:   
        asmcmd      =redefine =__prefix?.text
        arrange     identifier, =__prefix?
        transform   identifier
        jno         extract
        asmcmd      =restore =__prefix?
        publish     :return, head
        arrange     check_space, head
    insert_space:  
        asmcmd      =rawmatch ==check_space== =insert, text ; check if followed by space
        asmcmd      =define return
        asmcmd      =end =rawmatch
        jump        update
    extract: 
        arrange     identifier, head
    nested_loop: 
        match       first second, tail
        jno         finish
        match       ., first
        jno         nodot
        arrange     identifier, identifier.
        jump        define
    nodot:  
        match       cut., identifier
        jno         assign
        arrange     identifier, cut.first
    define: 
        arrange     tail, second
        arrange     check_void, =__prefix?.identifier
        transform   check_void
        jno         nested_loop
        match       . rest, tail
        jno         assign
        arrange     identifier, identifier.
        arrange     tail, rest
    assign: 
        publish     :return, identifier
        arrange     check_space, identifier
        jump        insert_space
    update: 
        arrange     text, tail
        jump        main
    finish: 
        publish     :return, head
end calminstruction

